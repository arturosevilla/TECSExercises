// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:

     // Instruction decoding

     // store decoding
     // we store in memory only if it is a C-instruction and instr[3] = 1
     And(a=instruction[3], b=instruction[15], out=writeM);

     // we store in A if it is an A-instruction or instr[5] = 1
     Not(in=instruction[15], out=isAinstr);
     Or(a=isAinstr, b=instruction[5], out=storeA);

     // we store in D only if it is a C-instruction and instr[4] = 1
     And(a=instruction[4], b=instruction[15], out=storeD);

     // jump decision only for C-instructions
     And(a=instruction[15], b=instruction[0], out=j3);
     And(a=instruction[15], b=instruction[1], out=j2);
     And(a=instruction[15], b=instruction[2], out=j1);

     // Instruction fetching
     Not(in=aluNeg, out=aluPos);
     And(a=j3, b=aluPos, out=jgt);
     And(a=j2, b=aluZero, out=jeq);
     And(a=j1, b=aluNeg, out=jlt);

     Or(a=jgt, b=jeq, out=jgeq);
     Or(a=jgeq, b=jlt, out=storePC);
     Not(in=reset, out=incPC);


     // CPU Architecture (instruction execution)

     Mux16(a[0..14]=instruction[0..14], a[15]=false, b=outALU,
           sel=instruction[15], out=multA);
     
     ARegister(in=multA, load=storeA, out=outA, out[0..14]=addressM);

     Mux16(a=outA, b=inM, sel=instruction[12], out=valueAM);

     DRegister(in=outALU, load=storeD, out=outD);

     PC(in=outA, reset=reset, load=storePC, inc=incPC, out[0..14]=pc);

     ALU(x=outD, y=valueAM, zx=instruction[11], nx=instruction[10],
         zy=instruction[9], ny=instruction[8], f=instruction[7],
         no=instruction[6], out=outALU, out=outM, zr=aluZero, ng=aluNeg);
}

